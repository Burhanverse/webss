name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract API version from config.py
      id: version
      run: |
        API_VERSION=$(grep -o 'api_version: str = "[^"]*"' src/config.py | grep -o '"[^"]*"' | tr -d '"')
        echo "API_VERSION=$API_VERSION" >> $GITHUB_OUTPUT

    - name: Extract release notes from RELEASE_NOTES.md
      id: release_notes
      run: |
        API_VERSION=$(grep -o 'api_version: str = "[^"]*"' src/config.py | grep -o '"[^"]*"' | tr -d '"')
        echo "Extracting release notes for version: $API_VERSION"
        
        # Use sed to extract the section between version headers
        RELEASE_NOTES=$(sed -n "/^## Version $API_VERSION/,/^## Version /p" RELEASE_NOTES.md | sed '$d' | tail -n +2 | sed 's/---$//' | sed '/^$/N;/^\n$/d')
        
        # If empty, try alternative extraction
        if [ -z "$RELEASE_NOTES" ]; then
          echo "First attempt failed, trying alternative extraction..."
          RELEASE_NOTES=$(awk -v version="$API_VERSION" '
            BEGIN { capture=0; content="" }
            /^## Version/ {
              if ($0 ~ version) {
                capture=1
                next
              } else if (capture) {
                exit
              }
            }
            capture && !/^---$/ {
              if (content == "") {
                content = $0
              } else {
                content = content "\n" $0
              }
            }
            END { print content }
          ' RELEASE_NOTES.md)
        fi
        
        # Clean up and escape for GitHub Actions
        if [ -n "$RELEASE_NOTES" ]; then
          # Remove trailing whitespace and newlines
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/[[:space:]]*$//')
          # Escape for GitHub Actions
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        else
          RELEASE_NOTES="No release notes found for version $API_VERSION."
        fi
        
        echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PAT }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v${{ steps.version.outputs.API_VERSION }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        no-cache: true

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.API_VERSION }}
        name: WebSS API v${{ steps.version.outputs.API_VERSION }}
        body: |
          ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          
          ---
          
          ### Docker Images
          - `ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.API_VERSION }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          ### Installation
          ```bash
          docker pull ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.API_VERSION }}
          ```
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
